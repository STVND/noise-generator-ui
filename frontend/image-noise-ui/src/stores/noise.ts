import { defineStore } from 'pinia';
import Rand from 'rand-seed';
import alea from 'alea';
import { createNoise2D } from 'simplex-noise';
import { Delaunay, Voronoi } from 'd3-delaunay';


export enum NoiseType {
    WHITE_NOISE = "white_noise",
    SIMPLEX = "simplex",
    SIMPLEX_WORLEY = "simplex_worley",
    WORLEY = "worley",
    FBM = "fBM",
}

interface NoiseState {
  noise_type: NoiseType;
  noise_image: ImageBitmap | null;
  size: number;
  description: string;
}

export const useNoiseStore = defineStore('noise', {
  state: (): NoiseState => ({
    noise_type: NoiseType.WHITE_NOISE,
    noise_image: null,
    size: 256, 
    description: ""
  }),
  actions: {
    async createNoiseImage() {
      switch (this.noise_type) {
        case NoiseType.WHITE_NOISE:
          await this.createWhiteNoiseImage();
          break;
        case (NoiseType.SIMPLEX):
          await this.createSimplexNoiseImage();
          break;
        default:
          alert("Unable to process request.")
          break;
        }
    },
    async createWhiteNoiseImage(seed?: string) {
      const rand = new Rand(seed)
      const offscreenCanvas: OffscreenCanvas = new OffscreenCanvas(this.size, this.size);
      const ctx: OffscreenCanvasRenderingContext2D | null = offscreenCanvas.getContext('2d');

      if (!ctx) {
        throw new Error('Could not get 2D context from offscreen canvas');
      }

      const imageData: ImageData = ctx.createImageData(this.size, this.size);
      const pixels: any = imageData.data;


      for (let y = 0; y < this.size; y++) {
        for (let x = 0; x < this.size; x++) {
          const index: number = (y * this.size + x) * 4;
          const pixelValue: number = Math.floor(rand.next() * 256);

          pixels[index] = pixelValue;
          pixels[index + 1] = pixelValue;
          pixels[index + 2] = pixelValue;
          pixels[index + 3] = 255;

        }
      }

      ctx.putImageData(imageData, 0, 0);

      try {
        this.noise_image = await createImageBitmap(offscreenCanvas);
      } catch (error) {
        console.error('Error creating image bitmap:', error);
      }

    },

    async createSimplexNoiseImage(seed?: string) {
      const rand = new Rand(seed)
      const offscreenCanvas: OffscreenCanvas = new OffscreenCanvas(this.size, this.size);
      const ctx: OffscreenCanvasRenderingContext2D | null = offscreenCanvas.getContext('2d');
      const noise2D = createNoise2D(alea(rand.next()));

      if (!ctx) {
        throw new Error('Could not get 2D context from offscreen canvas');
      }

      const imageData: ImageData = ctx.createImageData(this.size, this.size);
      const pixels: any = imageData.data;

      for (let x = 0; x < this.size; x++ ) {
        for (let y = 0; y < this.size; y++) {
          const index: number = (y * this.size + x) * 4;
          const pixelValue: number = Math.floor(noise2D(x , y) * 256);

          pixels[index] = pixelValue;
          pixels[index + 1] = pixelValue;
          pixels[index + 2] = pixelValue;
          pixels[index + 3] = 255;
        }
      }

      ctx.putImageData(imageData, 0, 0);

      try {
        this.noise_image = await createImageBitmap(offscreenCanvas);
      } catch (error) {
        console.error('Error creating image bitmap:', error);
      }
    },

    updateDescription() {
      switch (this.noise_type) {
        case NoiseType.WHITE_NOISE:
          this.description = "White noise is a set of randomly generated noise."
          break;
        case NoiseType.FBM:
          this.description = "Fractional Brownian Moiton. Noise generated by multiple iterations of a noise function."
          break;
        case NoiseType.WORLEY:
          this.description = "Procedural noise that creates cell-like patterns. Also known as Voronoi or Cellular noise."
          break;
        case NoiseType.SIMPLEX:
          this.description = "Procedurally generated noise that produces a smooth, natural-looking pattern."
          break;
        case NoiseType.SIMPLEX_WORLEY:
          this.description = "Combination of Simplex and Worley noise."
          break;
        default:
          this.description = ""
          break;
      }
    },
  }
  })
